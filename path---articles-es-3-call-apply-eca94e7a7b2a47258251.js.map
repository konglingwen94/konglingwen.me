{"version":3,"sources":["webpack:///path---articles-es-3-call-apply-eca94e7a7b2a47258251.js","webpack:///./.cache/json/articles-es-3-call-apply.json"],"names":["webpackJsonp","307","module","exports","data","markdownRemark","html","frontmatter","title","date","category","tags","cover","site","siteMetadata","url","thumbnail","defaultAuthor","donation","status","channel","alipay","wechat","share","pathContext","slug","excerpt","prev","fields","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,+kQAAqxOC,aAA0qCC,MAAA,oCAAAC,KAAA,aAAAC,SAAA,aAAAC,MAAA,cAAAC,MAAA,KAA0HC,MAASC,cAAgBC,IAAA,kCAAAC,UAAA,GAAAC,cAAA,MAAAC,UAAyFC,QAAA,EAAAC,SAAyBC,OAAA,2EAAAC,OAAA,KAAiGC,OAAA,KAAgBC,aAAgBC,KAAA,mBAAAjB,MAAA,oCAAAkB,QAAA,uBAAAC,MAA+GC,QAAUH,KAAA,uBAA6BlB,aAAgBC,MAAA,qBAAAE,SAAA,aAAAC,MAAA,MAAAC,MAAA,GAAAH,KAAA,aAAiGiB,QAAA,qIAA+IG,MAASD,QAAUH,KAAA,iCAAuClB,aAAgBC,MAAA,eAAAE,SAAA,aAAAC,MAAA,QAAAC,MAAA,GAAAH,KAAA,cAA8FiB,QAAA","file":"path---articles-es-3-call-apply-eca94e7a7b2a47258251.js","sourcesContent":["webpackJsonp([217841663097299],{\n\n/***/ 307:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>this 是什么</h2>\\n<p>Javascript<code class=\\\"language-text\\\">this</code>关键词指的是他所属的对象，它拥有不同的值，具体取决于使用的位置和调用方式。</p>\\n<ul>\\n<li>\\n<p>使用方式</p>\\n<ul>\\n<li>在方法中，它指向这个方法的<code class=\\\"language-text\\\">拥有者</code></li>\\n<li>在函数中，它是全局对象<code class=\\\"language-text\\\">window</code></li>\\n<li>严格模式下在函数中，它是<code class=\\\"language-text\\\">undefined</code></li>\\n<li>单独使用时，它是全局对象<code class=\\\"language-text\\\">window</code></li>\\n<li>在事件中，它指向触发事件的目标对象<code class=\\\"language-text\\\">e.target</code></li>\\n</ul>\\n</li>\\n</ul>\\n<h2>不同执行模式下的差异化</h2>\\n<p>javascript 中的<code class=\\\"language-text\\\">this</code>不同于其他编程语言，在严格模式和非严格模式下， 它的值是不同的，下面举个例子。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// 非严格模式</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">===</span> window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//true</span>\\n\\n<span class=\\\"token comment\\\">// 严格模式</span>\\n<span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'use strict'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// undefined</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// window</span></code></pre>\\n      </div>\\n<p>非严格模式下<code class=\\\"language-text\\\">foo</code>不论是函数调用还是作为一个方法调用，内部<code class=\\\"language-text\\\">this</code>的指向都是<code class=\\\"language-text\\\">window</code>。\\n在严格模式下，<code class=\\\"language-text\\\">foo</code>作为一个函数调用时<code class=\\\"language-text\\\">this</code>的值为<code class=\\\"language-text\\\">undefined</code>,而当做<code class=\\\"language-text\\\">window</code>对象的一个方法调用时，它的值指向了调用它的<code class=\\\"language-text\\\">window</code>对象。从代码书写的语义化来看的话，这种<code class=\\\"language-text\\\">this</code>的指向会更合理，这也是<code class=\\\"language-text\\\">javascript</code>的执行环境逐渐向严格模式靠拢的原因，从语言层面抛除一些不符合预期的执行结果。</p>\\n<h2>灵活使用<code class=\\\"language-text\\\">this</code>手动实现函数的<code class=\\\"language-text\\\">call</code>和<code class=\\\"language-text\\\">apply</code></h2>\\n<p>了解了<code class=\\\"language-text\\\">this</code>的诸多特性后我们能利用它实现什么有趣的功能呢？没错，就是下面要手动实现函数的<code class=\\\"language-text\\\">call</code>和<code class=\\\"language-text\\\">apply</code>方法。</p>\\n<p>首先我们需要知道<code class=\\\"language-text\\\">es5</code>的<code class=\\\"language-text\\\">call</code>方法实现了什么功能，它的第一个参数是调用函数的<code class=\\\"language-text\\\">this</code>绑定，其余的参数会作为实参传递给执行的函数。了解了这个功能，我们就可以动手去实现它了。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token class-name\\\">Function</span><span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">_call</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">_call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">context<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>args</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>context <span class=\\\"token operator\\\">==</span> <span class=\\\"token keyword\\\">undefined</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    context <span class=\\\"token operator\\\">=</span> window <span class=\\\"token operator\\\">||</span> global\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    context <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Object</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// 获取当前要调用的函数挂载到`context`上</span>\\n\\n  context<span class=\\\"token punctuation\\\">.</span>handler <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">handler</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>args<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">delete</span> context<span class=\\\"token punctuation\\\">.</span>handler\\n  <span class=\\\"token keyword\\\">return</span> result\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 测试一下</span>\\n<span class=\\\"token keyword\\\">const</span> value <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span>\\n\\n<span class=\\\"token keyword\\\">const</span> foo <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  value<span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">arg</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> arg\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> retVal <span class=\\\"token operator\\\">=</span> print<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">_call</span><span class=\\\"token punctuation\\\">(</span>foo<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 1</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>retVal<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 2</span></code></pre>\\n      </div>\\n<p>为了让<code class=\\\"language-text\\\">_call</code>函数的第一个参数作为<code class=\\\"language-text\\\">this</code>传入到执行函数中去，这里在<code class=\\\"language-text\\\">_call</code>函数内部做了一个变通，把待执行的函数作为<code class=\\\"language-text\\\">context</code>对象的一个方法调用，这样就实现了更改函数调用时<code class=\\\"language-text\\\">this</code>指向的问题。测试后的执行结果也是符合我们的预期的。同理<code class=\\\"language-text\\\">apply</code>函数的实现方式也是如此，只需要把传递的参数处理一下即可，这里就不在演示了。</p>\\n<p>备注: 本篇文章属于作者原创，转载请注明出处。\\n参考：<a href=\\\"https://github.com/mqyqingfeng/Blog/issues/11\\\">JavaScript 深入之 call 和 apply 的模拟实现</a></p>\",\"frontmatter\":{\"title\":\"深入掌握 javascript 中的 this 能帮助我们做什么？\",\"date\":\"2020-04-18\",\"category\":\"Javascript\",\"tags\":[\"Javascript\"],\"cover\":\"\"}},\"site\":{\"siteMetadata\":{\"url\":\"https://konglingwen94.github.io\",\"thumbnail\":\"\",\"defaultAuthor\":\"孔令文\",\"donation\":{\"status\":true,\"channel\":{\"alipay\":\"https://cdn-images-1.medium.com/max/1600/1*PZjwR1Nbluff5IMI6Y1T6g@2x.png\",\"wechat\":\"\"}},\"share\":true}}},\"pathContext\":{\"slug\":\"/es3-call-apply/\",\"title\":\"深入掌握 javascript 中的 this 能帮助我们做什么？\",\"excerpt\":\"this 是什么 Javascript…\",\"prev\":{\"fields\":{\"slug\":\"/deep-clone-object/\"},\"frontmatter\":{\"title\":\"实现Javascript对象的深拷贝\",\"category\":\"Javascript\",\"tags\":[\"工具\"],\"cover\":\"\",\"date\":\"2020-4-05\"},\"excerpt\":\"文章首发于 个人博客 前提 在处理日常的业务开发当中，数据拷贝是经常需要用到的。但是 javascript 提供的数据操作 Api 当中能实现对象克隆的都是浅拷贝，比如 Object.assign 和 ES6 新增的对象扩展运算符（...）,这两个 Api…\"},\"next\":{\"fields\":{\"slug\":\"/iterate-runtime-performance/\"},\"frontmatter\":{\"title\":\"如何选择你的数据遍历方式\",\"category\":\"javascript\",\"tags\":[\"性能优化\"],\"cover\":\"\",\"date\":\"2020-04-15\"},\"excerpt\":\"概述 循环提供了一种快速和重复的方式去做同一件事，javascript 里提供了不同类型和功能的循环语句供我们使用，但是你有了解过这些语句在运行时的性能差异吗？ 循环方式 for 语句 for... in 语句 for... of 语句 while 语句 do... while…\"}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---articles-es-3-call-apply-eca94e7a7b2a47258251.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>this 是什么</h2>\\n<p>Javascript<code class=\\\"language-text\\\">this</code>关键词指的是他所属的对象，它拥有不同的值，具体取决于使用的位置和调用方式。</p>\\n<ul>\\n<li>\\n<p>使用方式</p>\\n<ul>\\n<li>在方法中，它指向这个方法的<code class=\\\"language-text\\\">拥有者</code></li>\\n<li>在函数中，它是全局对象<code class=\\\"language-text\\\">window</code></li>\\n<li>严格模式下在函数中，它是<code class=\\\"language-text\\\">undefined</code></li>\\n<li>单独使用时，它是全局对象<code class=\\\"language-text\\\">window</code></li>\\n<li>在事件中，它指向触发事件的目标对象<code class=\\\"language-text\\\">e.target</code></li>\\n</ul>\\n</li>\\n</ul>\\n<h2>不同执行模式下的差异化</h2>\\n<p>javascript 中的<code class=\\\"language-text\\\">this</code>不同于其他编程语言，在严格模式和非严格模式下， 它的值是不同的，下面举个例子。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// 非严格模式</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">===</span> window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//true</span>\\n\\n<span class=\\\"token comment\\\">// 严格模式</span>\\n<span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'use strict'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// undefined</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// window</span></code></pre>\\n      </div>\\n<p>非严格模式下<code class=\\\"language-text\\\">foo</code>不论是函数调用还是作为一个方法调用，内部<code class=\\\"language-text\\\">this</code>的指向都是<code class=\\\"language-text\\\">window</code>。\\n在严格模式下，<code class=\\\"language-text\\\">foo</code>作为一个函数调用时<code class=\\\"language-text\\\">this</code>的值为<code class=\\\"language-text\\\">undefined</code>,而当做<code class=\\\"language-text\\\">window</code>对象的一个方法调用时，它的值指向了调用它的<code class=\\\"language-text\\\">window</code>对象。从代码书写的语义化来看的话，这种<code class=\\\"language-text\\\">this</code>的指向会更合理，这也是<code class=\\\"language-text\\\">javascript</code>的执行环境逐渐向严格模式靠拢的原因，从语言层面抛除一些不符合预期的执行结果。</p>\\n<h2>灵活使用<code class=\\\"language-text\\\">this</code>手动实现函数的<code class=\\\"language-text\\\">call</code>和<code class=\\\"language-text\\\">apply</code></h2>\\n<p>了解了<code class=\\\"language-text\\\">this</code>的诸多特性后我们能利用它实现什么有趣的功能呢？没错，就是下面要手动实现函数的<code class=\\\"language-text\\\">call</code>和<code class=\\\"language-text\\\">apply</code>方法。</p>\\n<p>首先我们需要知道<code class=\\\"language-text\\\">es5</code>的<code class=\\\"language-text\\\">call</code>方法实现了什么功能，它的第一个参数是调用函数的<code class=\\\"language-text\\\">this</code>绑定，其余的参数会作为实参传递给执行的函数。了解了这个功能，我们就可以动手去实现它了。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token class-name\\\">Function</span><span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">_call</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">_call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">context<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>args</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>context <span class=\\\"token operator\\\">==</span> <span class=\\\"token keyword\\\">undefined</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    context <span class=\\\"token operator\\\">=</span> window <span class=\\\"token operator\\\">||</span> global\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    context <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Object</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// 获取当前要调用的函数挂载到`context`上</span>\\n\\n  context<span class=\\\"token punctuation\\\">.</span>handler <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">handler</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>args<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">delete</span> context<span class=\\\"token punctuation\\\">.</span>handler\\n  <span class=\\\"token keyword\\\">return</span> result\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 测试一下</span>\\n<span class=\\\"token keyword\\\">const</span> value <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span>\\n\\n<span class=\\\"token keyword\\\">const</span> foo <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  value<span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">arg</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> arg\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> retVal <span class=\\\"token operator\\\">=</span> print<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">_call</span><span class=\\\"token punctuation\\\">(</span>foo<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 1</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>retVal<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 2</span></code></pre>\\n      </div>\\n<p>为了让<code class=\\\"language-text\\\">_call</code>函数的第一个参数作为<code class=\\\"language-text\\\">this</code>传入到执行函数中去，这里在<code class=\\\"language-text\\\">_call</code>函数内部做了一个变通，把待执行的函数作为<code class=\\\"language-text\\\">context</code>对象的一个方法调用，这样就实现了更改函数调用时<code class=\\\"language-text\\\">this</code>指向的问题。测试后的执行结果也是符合我们的预期的。同理<code class=\\\"language-text\\\">apply</code>函数的实现方式也是如此，只需要把传递的参数处理一下即可，这里就不在演示了。</p>\\n<p>备注: 本篇文章属于作者原创，转载请注明出处。\\n参考：<a href=\\\"https://github.com/mqyqingfeng/Blog/issues/11\\\">JavaScript 深入之 call 和 apply 的模拟实现</a></p>\",\"frontmatter\":{\"title\":\"深入掌握 javascript 中的 this 能帮助我们做什么？\",\"date\":\"2020-04-18\",\"category\":\"Javascript\",\"tags\":[\"Javascript\"],\"cover\":\"\"}},\"site\":{\"siteMetadata\":{\"url\":\"https://konglingwen94.github.io\",\"thumbnail\":\"\",\"defaultAuthor\":\"孔令文\",\"donation\":{\"status\":true,\"channel\":{\"alipay\":\"https://cdn-images-1.medium.com/max/1600/1*PZjwR1Nbluff5IMI6Y1T6g@2x.png\",\"wechat\":\"\"}},\"share\":true}}},\"pathContext\":{\"slug\":\"/es3-call-apply/\",\"title\":\"深入掌握 javascript 中的 this 能帮助我们做什么？\",\"excerpt\":\"this 是什么 Javascript…\",\"prev\":{\"fields\":{\"slug\":\"/deep-clone-object/\"},\"frontmatter\":{\"title\":\"实现Javascript对象的深拷贝\",\"category\":\"Javascript\",\"tags\":[\"工具\"],\"cover\":\"\",\"date\":\"2020-4-05\"},\"excerpt\":\"文章首发于 个人博客 前提 在处理日常的业务开发当中，数据拷贝是经常需要用到的。但是 javascript 提供的数据操作 Api 当中能实现对象克隆的都是浅拷贝，比如 Object.assign 和 ES6 新增的对象扩展运算符（...）,这两个 Api…\"},\"next\":{\"fields\":{\"slug\":\"/iterate-runtime-performance/\"},\"frontmatter\":{\"title\":\"如何选择你的数据遍历方式\",\"category\":\"javascript\",\"tags\":[\"性能优化\"],\"cover\":\"\",\"date\":\"2020-04-15\"},\"excerpt\":\"概述 循环提供了一种快速和重复的方式去做同一件事，javascript 里提供了不同类型和功能的循环语句供我们使用，但是你有了解过这些语句在运行时的性能差异吗？ 循环方式 for 语句 for... in 语句 for... of 语句 while 语句 do... while…\"}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/articles-es-3-call-apply.json\n// module id = 307\n// module chunks = 217841663097299"],"sourceRoot":""}