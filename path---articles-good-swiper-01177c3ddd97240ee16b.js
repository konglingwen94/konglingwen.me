webpackJsonp([0xccc0b18059e0],{302:function(n,s){n.exports={data:{markdownRemark:{html:'<h2>创建目录结构</h2>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">vue<span class="token operator">-</span>swiper<span class="token operator">/</span>\n├── src<span class="token operator">/</span>\n│   ├── components<span class="token operator">/</span> <span class="token comment">//内置组件</span>\n│   │   ├── indicator<span class="token punctuation">.</span>vue  <span class="token comment">// 指示器组件</span>\n│   │   └── item<span class="token punctuation">.</span>vue  <span class="token comment">// 单个轮播图容器组件</span>\n│   ├── main<span class="token punctuation">.</span>js  <span class="token comment">// 项目出口</span>\n│   └── main<span class="token punctuation">.</span>vue  <span class="token comment">//组件出口</span>\n├── <span class="token constant">README</span><span class="token punctuation">.</span>md  \n├── <span class="token keyword">package</span><span class="token punctuation">.</span>json\n└── vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js  <span class="token comment">// 组件打包配置文件</span></code></pre>\n      </div>\n<h2>项目结构解析</h2>\n<p>我们知道一个轮播图是由其容器和内容构成的，这里首先把整个轮播图组件拆分为入口组件和其要用到的子组件（指示器组件可以根据自己的项目维护方式自由拆分，这里把它单独拆出来便于以后维护）。以往我们在使用第三方组件的时候可能会看到其组件就是单独的一个入口，所有的属性传入和事件监听都是放在了一个大的组件上了，其实这种封装的方式后期是不好维护的，而且在使用的时候也是不容易发现出现的问题，为了能让组件自身更具有语义化以及开发当中便于调试和后期组件的维护，我们把容器和内容分离开拆成两个组件，这样用户在模板中书写组件时候就能像使用普通的 HTML 标签一样嵌套使用了。</p>\n<h2>前提</h2>\n<p>以往我们开发一个页面中的轮播图可能会牵扯到大量手动的 DOM 样式操作，这里带来的问题就是我们关心的视图变化和逻辑操作混到了一起，关注点没有分离开，无论从维护还是代码的可读性这种方式都不是最优的。现在我们是基于 Vue 开发的这个组件，这样就可以利用它最核心的思想（数据驱动视图改变）开完成这个组件的开发。</p>\n<h2>数据驱动动画</h2>\n<p>有了数据驱动的这个主要思想，我们就可以围绕它展开组件开发了。首先把轮播图播放动画当中能用到的状态变量进行初始化</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// main.vue</span>\n<span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    reversing<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//控制动画播放到首尾时无缝跳转的开关</span>\n    swiperItemCount<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">// 初始化传入的轮播图个数</span>\n    index<span class="token operator">:</span><span class="token number">0</span> <span class="token comment">// 控制轮播图当前位置的索引</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\ncomputed<span class="token operator">:</span><span class="token punctuation">{</span>\n  <span class="token function">scrollItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 内容实际存在的图片个数</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>swiperItemCount<span class="token operator">+</span><span class="token number">2</span> <span class="token comment">// 组件初始化以后需要复制传进来的首尾两张图片到指定位置，所以这里需要加上2</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>之所以要定义 reversing 这个变量是因为当动画播放到首尾端点的时候，我们要瞬间跳转到对应的首尾位置，然后就可以更改这个变量的值来关闭相应的动画以达到用户视觉上无缝滚动的效果。</p>\n<p>至于 index 其语义大概已经描述了它所需要做的事情了，就是通过更改这个索引的值以驱动图片的位置移动，这样就有了视觉上动画的效果。相关的代码如下</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"> watch<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">index</span><span class="token punctuation">(</span><span class="token parameter">newIndex<span class="token punctuation">,</span> oldIndex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> endIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scrollItemCount <span class="token operator">-</span> <span class="token number">1</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>newIndex <span class="token operator">===</span> endIndex <span class="token operator">&amp;&amp;</span> newIndex <span class="token operator">></span> oldIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span>reversing <span class="token operator">=</span> <span class="token boolean">true</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token number">1</span>\n          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>reversing <span class="token operator">=</span> <span class="token boolean">false</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>duration<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newIndex <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> newIndex <span class="token operator">&lt;</span> oldIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span>reversing <span class="token operator">=</span> <span class="token boolean">true</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> endIndex <span class="token operator">-</span> <span class="token number">1</span>\n          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>reversing <span class="token operator">=</span> <span class="token boolean">false</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>duration<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>这里通过观测动画播放的当前位置这个变量，我们在相应的时机更改它的值来达到整个包装容器的瞬间移动，这样也就产生了图片播放连续的动画效果了。</p>\n<h2>相关的技术要点</h2>\n<h3>前提</h3>\n<p>单个的图片内容是以 slot（相关 Api 查看<a href="https://cn.vuejs.org/v2/api/#vm-slots">这里</a>，本片文章不做介绍）的方式接收的，我们知道当前组件的$slot 属性存储的是 vnode(不了解 vnode 的看<a href="https://cn.vuejs.org/v2/api/#VNode-%E6%8E%A5%E5%8F%A3">这里</a>，同样不过多介绍)。</p>\n<blockquote>\n<p>匿名插槽内容筛选</p>\n</blockquote>\n<p>有了 slot，组件内部可以接受外界传进来的一切内容，而我们这里只需要组件定义的指定子组件，所以在组件启动后还需要对默认的匿名插槽重新处理后才可以使用，让我们看代码吧</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"> <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span>default <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span>default<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">vnode</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>\n        vnode<span class="token punctuation">.</span>componentOptions <span class="token operator">&amp;&amp;</span> vnode<span class="token punctuation">.</span>componentOptions<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">\'swiper-item\'</span>\n      <span class="token punctuation">)</span>\n\n      <span class="token comment">// swiper-item 取决于注册的指定组件名称</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>swiperItemCount <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span>default<span class="token punctuation">.</span>length\n  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>\n      </div>\n<p>了解 Vue 虚拟 DOM 渲染原理的同学应该知道，每一次的 vnode 更新都会导致页面组件的冲渲染，代码中通过过滤需要的 vnode 重新赋值到接收匿名插槽的接口上，这样 Vue 内部通过检测 vnode 的变更会渲染新的 vnode 到组件视图上，接下来就可以调整内容节点的结构了。</p>\n<blockquote>\n<p>如何复制外界传入的首尾图片</p>\n</blockquote>\n<p>vnode 有一个 tag 属性存储了它所渲染的真实 DOM 的引用，这样我们就可以通过相关的 DOM 操作 Api 来复制这些节点从而达到我们的目的，相关的代码片段在这里</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> firstItem <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span>default<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elm\n  <span class="token keyword">const</span> lastItem <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span>default<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span>default<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elm\n  <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>wrapper<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>firstItem<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>wrapper<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>lastItem<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> firstItem<span class="token punctuation">)</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>autoplay <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>\n      </div>\n<h2></h2>\n<h2>总结</h2>\n<p>文章通过介绍 Vue 数据驱动的思想实现了一些动画效果，当我们想封装一些别的组件的时候同样可以利用这一点来达到各种各样的需求。文章没有介绍数据和视图的绑定操作部分，有兴趣的同学可以查看本项目的 Github 仓库：<a href="https://github.com/konglingwen94/good-swiper">good-swiper</a></p>\n<p>备注：本篇文章属于作者原创，转载请标注出处，谢谢！</p>',frontmatter:{title:"封装一个自己的轮播图组件（基于 Vue）",date:"2020-04-02",category:"轮子",tags:["Vue"],cover:""}},site:{siteMetadata:{url:"https://konglingwen94.github.io",thumbnail:"",defaultAuthor:"孔令文",donation:{status:!0,channel:{alipay:"https://cdn-images-1.medium.com/max/1600/1*PZjwR1Nbluff5IMI6Y1T6g@2x.png",wechat:""}},share:!0}}},pathContext:{slug:"/good-swiper/",title:"封装一个自己的轮播图组件（基于 Vue）",excerpt:"…",prev:!1,next:{fields:{slug:"/comment-editor/"},frontmatter:{title:"封装一个基于Vue的留言评论编辑器组件",category:"Vue",tags:["轮子"],cover:"",date:"2020-03-26"},excerpt:"基本介绍 现在市面上有非常多的基于 Vue…"}}}}});
//# sourceMappingURL=path---articles-good-swiper-01177c3ddd97240ee16b.js.map