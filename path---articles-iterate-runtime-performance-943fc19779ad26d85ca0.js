webpackJsonp([0x5c43dc37613d],{309:function(n,s){n.exports={data:{markdownRemark:{html:'<h2>概述</h2>\n<p>循环提供了一种快速和重复的方式去做同一件事，javascript 里提供了不同类型和功能的循环语句供我们使用，但是你有了解过这些语句在运行时的性能差异吗？</p>\n<h2>循环方式</h2>\n<ul>\n<li>\n<p>for 语句</p>\n</li>\n<li>\n<p>for... in 语句</p>\n</li>\n<li>\n<p>for... of 语句</p>\n</li>\n<li>\n<p>while 语句</p>\n</li>\n<li>\n<p>do... while 语句</p>\n</li>\n<li>\n<p>forEach 方法 (仅 Array 类型可用)</p>\n</li>\n</ul>\n<p>除了<code class="language-text">do...while</code>和<code class="language-text">while</code>这两种循环方式的差异化不明显之外，我们只需要测试其他五种方式即可，下面我们就以<code class="language-text">Object</code>和<code class="language-text">Array</code>为遍历目标测试不同循环方式的运行时时间</p>\n<h2>目标测试</h2>\n<h3>Array遍历</h3>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">printTimer</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">\'runtime with `for`\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> target<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    target<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">\'runtime with `for`\'</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// benchmark with `while`</span>\n  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">\'runtime with `while`\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> len <span class="token operator">=</span> target<span class="token punctuation">.</span>length\n  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    target<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n\n  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">\'runtime with `while`\'</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// `for in`</span>\n\n  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">\'runtime with for in\'</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    target<span class="token punctuation">[</span>k<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">\'runtime with for in\'</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// `for of`</span>\n  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">\'runtime with `for of`\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    value\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">\'runtime with `for of`\'</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// forEach</span>\n\n  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">\'runtime with `forEach`\'</span><span class="token punctuation">)</span>\n  target<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    item\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">\'runtime with `forEach`\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Test smallArray</span>\n<span class="token keyword">const</span> smallerArray <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token operator">:</span> <span class="token number">10000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token function">printTimer</span><span class="token punctuation">(</span>smallerArray<span class="token punctuation">)</span>\n\n<span class="token comment">// runtime with `for`: 0.263ms</span>\n<span class="token comment">// runtime with `while`: 0.184ms</span>\n<span class="token comment">// runtime with for in: 13.052ms</span>\n<span class="token comment">// runtime with `for of`: 0.315ms</span>\n<span class="token comment">// runtime with `forEach`: 0.196ms</span>\n\n<span class="token comment">// Test biggerArray</span>\n<span class="token keyword">const</span> biggerArray <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token operator">:</span> <span class="token number">10000000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token function">printTimer</span><span class="token punctuation">(</span>biggerArray<span class="token punctuation">)</span>\n<span class="token comment">// runtime with `for`: 8.77ms</span>\n<span class="token comment">// runtime with `while`: 5.107ms</span>\n<span class="token comment">// runtime with for in: 2.890s</span>\n<span class="token comment">// runtime with `for of`: 16.14ms</span>\n<span class="token comment">// runtime with `forEach`: 2.905ms</span></code></pre>\n      </div>\n<p>以上通过对不同大小的<code class="language-text">数组</code>遍历可以发现，运行速度最快的是<code class="language-text">while</code>语句，其次是<code class="language-text">forEach</code>方法，性能最差的是<code class="language-text">for in</code>语句，当遍历的数据长度增加后，这个结果更明显。</p>\n<h3>遍历 Object</h3>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">printTimer</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>\n\n  <span class="token comment">//   `for`</span>\n  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">\'run with `for`\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    target<span class="token punctuation">[</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">\'run with `for`\'</span><span class="token punctuation">)</span>\n\n  <span class="token comment">//   `while`</span>\n  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">\'run with `while`\'</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">let</span> len <span class="token operator">=</span> keys<span class="token punctuation">.</span>length\n  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    target<span class="token punctuation">[</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n\n  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">\'run with `while`\'</span><span class="token punctuation">)</span>\n\n  <span class="token comment">//   `for in`</span>\n\n  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">\'run with `for in`\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">\'run with `for in`\'</span><span class="token punctuation">)</span>\n\n  <span class="token comment">//   `forEach`</span>\n\n  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">\'run with `forEach`\'</span><span class="token punctuation">)</span>\n  keys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">\'run with `forEach`\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i\n<span class="token punctuation">}</span>\n\n<span class="token function">printTimer</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>\n\n<span class="token comment">// run with `for`: 8.428ms</span>\n<span class="token comment">// run with `while`: 8.932ms</span>\n<span class="token comment">// run with `for in`: 106.705ms</span>\n<span class="token comment">// run with `forEach`: 17.548ms</span></code></pre>\n      </div>\n<p>由于普通的<code class="language-text">Object</code>没有<code class="language-text">iterator</code>接口，所以这里省略了<code class="language-text">for of</code>语句的测试场景。除了<code class="language-text">for in</code>语句可以直接遍历一个对象之外，其他三种循环方法先是获取到这个对象的<code class="language-text">key</code>数组，然后通过遍历这个数组读取对象的属性值完成遍历。所以这里跟对<code class="language-text">Array</code>的遍历性能大致相同。</p>\n<h2>总结</h2>\n<p>有了以上两种不同数据结构的遍历结果，不同循环语句和方法之间的性能差异也很明显了。所以我们在对数据遍历时可以优先使用<code class="language-text">while</code>语句，其次是<code class="language-text">for</code>语句和<code class="language-text">forEach</code>方法，性能最差的是<code class="language-text">for in</code>语句和<code class="language-text">for of</code>语句，这里就不推荐使用了。</p>',frontmatter:{title:"如何选择你的数据遍历方式",date:"2020-04-15",category:"javascript",tags:["性能优化"],cover:""}},site:{siteMetadata:{url:"https://konglingwen94.github.io",thumbnail:"",defaultAuthor:"孔令文",donation:{status:!0,channel:{alipay:"https://cdn-images-1.medium.com/max/1600/1*PZjwR1Nbluff5IMI6Y1T6g@2x.png",wechat:""}},share:!0}}},pathContext:{slug:"/iterate-runtime-performance/",title:"如何选择你的数据遍历方式",excerpt:"概述 循环提供了一种快速和重复的方式去做同一件事，javascript 里提供了不同类型和功能的循环语句供我们使用，但是你有了解过这些语句在运行时的性能差异吗？ 循环方式 for 语句 for... in 语句 for... of 语句 while 语句 do... while…",prev:{fields:{slug:"/es3-call-apply/"},frontmatter:{title:"深入掌握 javascript 中的 this 能帮助我们做什么？",category:"Javascript",tags:["Javascript"],cover:"",date:"2020-04-18"},excerpt:"this 是什么 Javascript…"},next:{fields:{slug:"/message-tree/"},frontmatter:{title:"封装一个基于Vue的留言评论编辑器组件",category:"Vue",tags:["轮子"],cover:"",date:"2020-04-05"},excerpt:"封装通用的用户评论消息组件（Vue…"}}}}});
//# sourceMappingURL=path---articles-iterate-runtime-performance-943fc19779ad26d85ca0.js.map