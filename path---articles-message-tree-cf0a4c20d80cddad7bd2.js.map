{"version":3,"sources":["webpack:///path---articles-message-tree-cf0a4c20d80cddad7bd2.js","webpack:///./.cache/json/articles-message-tree.json"],"names":["webpackJsonp","308","module","exports","data","markdownRemark","html","frontmatter","title","date","category","tags","cover","site","siteMetadata","url","thumbnail","defaultAuthor","donation","status","channel","alipay","wechat","share","pathContext","slug","excerpt","prev","fields","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,6ofAA+8eC,aAAwjBC,MAAA,sBAAAC,KAAA,aAAAC,SAAA,MAAAC,MAAA,MAAAC,MAAA,KAA6FC,MAASC,cAAgBC,IAAA,kCAAAC,UAAA,GAAAC,cAAA,MAAAC,UAAyFC,QAAA,EAAAC,SAAyBC,OAAA,2EAAAC,OAAA,KAAiGC,OAAA,KAAgBC,aAAgBC,KAAA,iBAAAjB,MAAA,sBAAAkB,QAAA,qBAAAC,MAA6FC,QAAUH,KAAA,iCAAuClB,aAAgBC,MAAA,eAAAE,SAAA,aAAAC,MAAA,QAAAC,MAAA,GAAAH,KAAA,cAA8FiB,QAAA,gJAA0JG,MAASD,QAAUH,KAAA,iBAAuBlB,aAAgBC,MAAA,uBAAAE,SAAA,KAAAC,MAAA,OAAAC,MAAA,GAAAH,KAAA,cAA6FiB,QAAA","file":"path---articles-message-tree-cf0a4c20d80cddad7bd2.js","sourcesContent":["webpackJsonp([90083593868317],{\n\n/***/ 308:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>封装通用的用户评论消息组件（Vue）</h1>\\n<h2>组件功能</h2>\\n<p>大部分文章展示类的网站都有用户评论的功能，看了这么多的评论消息的你是不是也想封装一个通过的组件呢，以备用到的时候可以直接拿来复用。现在我们就简单概括一下这个组件的主要功能，</p>\\n<p>既然是评论消息组件，首先把用户已经评论过的消息展示出来是这个组件的基本功能，然后针对每一条消息还可以对他进行回复，这就好比现实世界中人们的交流一样，每个人发表了一段话，听到的人都可以进行回复，然后针对回复我们还可以进行回复，其实这是一个无限循环的交流过程，把这种现实中的场景放到程序中有一个专业的算法术语与之对应，那就是递归（recursive），不过现在的网站评论功能都只是展示两层的对话内容（评论和回复），今天我们要实现的是可以无限级的进行消息回复的一个功能组件。这个不仅是利用了递归的思想开发一个组件，而且当你遇到别的业务场景的时候一样可以复用这一套逻辑，比如要实现一个文件树的功能，其利用的也是数据递归的思想。那现在就让我们去封装这个组件吧!</p>\\n<h2>创建目录结构</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">├── src<span class=\\\"token operator\\\">/</span>\\n│   ├── components<span class=\\\"token operator\\\">/</span> <span class=\\\"token comment\\\">//内部组建</span>\\n│   │   ├── message<span class=\\\"token operator\\\">-</span>editor<span class=\\\"token punctuation\\\">.</span>vue <span class=\\\"token comment\\\">//评论编辑器</span>\\n│   │   ├── message<span class=\\\"token operator\\\">-</span>group<span class=\\\"token punctuation\\\">.</span>vue <span class=\\\"token comment\\\">//评论列表</span>\\n│   │   └── message<span class=\\\"token operator\\\">-</span>item<span class=\\\"token punctuation\\\">.</span>vue  <span class=\\\"token comment\\\">//单个评论</span>\\n│   ├── main<span class=\\\"token punctuation\\\">.</span>js  <span class=\\\"token comment\\\">//导出文件</span>\\n│   ├── main<span class=\\\"token punctuation\\\">.</span>vue  <span class=\\\"token comment\\\">//入口组建</span>\\n│   └── util<span class=\\\"token punctuation\\\">.</span>js\\n├── test<span class=\\\"token operator\\\">/</span>\\n├── <span class=\\\"token constant\\\">README</span><span class=\\\"token punctuation\\\">.</span>md\\n├── babel<span class=\\\"token punctuation\\\">.</span>config<span class=\\\"token punctuation\\\">.</span>js\\n├── <span class=\\\"token keyword\\\">package</span><span class=\\\"token punctuation\\\">.</span>json\\n└── vue<span class=\\\"token punctuation\\\">.</span>config<span class=\\\"token punctuation\\\">.</span>js</code></pre>\\n      </div>\\n<p>先创建好项目目录，然后把需要用到的内部组件也创建好，这样整个项目的骨架结构就搭建好了，接下来我们就开始功能的开发吧！</p>\\n<h2>组件拆分</h2>\\n<p>为了更好的实现组件模块化管理，这里把需要用到的功能组件都放到<code class=\\\"language-text\\\">component</code>的目录里面，现在就介绍一下这些组件最终都实现了怎样的功能。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">--</span> message<span class=\\\"token operator\\\">-</span>group<span class=\\\"token punctuation\\\">.</span>vue <span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">></span>\\n\\n<span class=\\\"token operator\\\">&lt;</span>template<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span>div <span class=\\\"token keyword\\\">class</span><span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"message-group\\\"</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>ul<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>li v<span class=\\\"token operator\\\">-</span><span class=\\\"token keyword\\\">for</span><span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"(item,index) in dataList\\\"</span> <span class=\\\"token operator\\\">:</span>key<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"index\\\"</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>message<span class=\\\"token operator\\\">-</span>item <span class=\\\"token operator\\\">:</span>data<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"item\\\"</span><span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>message<span class=\\\"token operator\\\">-</span>item<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>li<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>ul<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>template<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token operator\\\">&lt;</span>script<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"MessageGroup\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  props<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    dataList<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      type<span class=\\\"token operator\\\">:</span> Array<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token keyword\\\">default</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>script<span class=\\\"token operator\\\">></span>\\n\\n<span class=\\\"token operator\\\">&lt;</span>style<span class=\\\"token operator\\\">></span>\\nul<span class=\\\"token punctuation\\\">,</span>\\nli <span class=\\\"token punctuation\\\">{</span>\\n  list<span class=\\\"token operator\\\">-</span>style<span class=\\\"token operator\\\">:</span> none<span class=\\\"token punctuation\\\">;</span>\\n  margin<span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  padding<span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>style<span class=\\\"token operator\\\">></span></code></pre>\\n      </div>\\n<p>这个<code class=\\\"language-text\\\">message-group</code>组件其实就是对<code class=\\\"language-text\\\">message-item.vue（具体实现方式后面会详细介绍）</code>组件的一个列表循环展示，他就是一个消息树容器组件，这里为了开发和展示的过程中让项目组件结构的语义化更强就把他单独抽离出来了，而且当我们在浏览器<code class=\\\"language-text\\\">vue-devtool（vue项目开发中调试插件）</code>的选项面板中也能更清楚的看到每个组件所对应的视图是哪一块，这对于更好的组织组件结构是有好处的。下面用一个图片演示一下效果。</p>\\n<p><img src=\\\"https://github.com/konglingwen94/lite-blog/blob/master/screenshots/message-tree/Apr-11-2020%2021-09-43.gif?raw=true\\\" alt=\\\"message-tree\\\"></p>\\n<h2>Vue 组件递归调用</h2>\\n<p>组件是可以在它们自己的模板中调用自身的。不过它们只能通过 name 选项来做这件事</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">name<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"unique-name-of-my-component\\\"</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>当你使用 Vue.component 全局注册一个组件时，这个全局的 ID 会自动设置为该组件的 name 选项。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">Vue<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">component</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"unique-name-of-my-component\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>稍有不慎，递归组件就可能导致无限循环：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">name<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'stack-overflow'</span><span class=\\\"token punctuation\\\">,</span>\\ntemplate<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'&lt;div>&lt;stack-overflow>&lt;/stack-overflow>&lt;/div>'</span></code></pre>\\n      </div>\\n<p>类似上述的组件将会导致“max stack size exceeded”错误，所以请确保递归调用是条件性的 (例如使用一个最终会得到 false 的 v-if)。我们需要定义一个什么样的条件呢？如果给每一个被自身调用的递归组件打上一个层级深度的标志位（level），然后通过判断这个<code class=\\\"language-text\\\">level</code>的值来控制组件调用是不是就可以了。现在我们重写改写一下代码</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\">&lt;!-- `my-component.vue` --&gt;\\n\\n&lt;template&gt;\\n  &lt;div&gt;\\n    &lt;!-- my-component 需要全局注册，这里省略注册的代码 --&gt;\\n\\n    &lt;my-component v-if=&quot;level===renderLevel&quot;&gt;&lt;/my-component&gt;\\n  &lt;/div&gt;\\n&lt;/template&gt;\\n\\n&lt;script&gt;\\nexport default {\\n  name:&#39;my-component&#39;,\\n  inject:{\\n    level:{\\n      default:1\\n    }\\n  },\\n  provide(){\\n    return {\\n      level:this.level+1\\n    }\\n  },\\n  data(){\\n    return {\\n      renderLevel:1\\n    }\\n  }\\n\\n}\\n&lt;/script&gt;</code></pre>\\n      </div>\\n<p>我们先是通过 Vue 提供的组件选项<code class=\\\"language-text\\\">provide</code>和<code class=\\\"language-text\\\">inject</code>这两个配置项给每一个递归被调用的组件标注了一个层级<code class=\\\"language-text\\\">level</code>,然后在组件内部定义一个<code class=\\\"language-text\\\">renderLevel</code>的状态，通过判断需要展示的组件层级是否满足条件来终止递归组件的调用.</p>\\n<blockquote>\\n<p>有关<code class=\\\"language-text\\\">provide</code>和<code class=\\\"language-text\\\">inject</code>组合项的详细介绍请查看<a href=\\\"https://cn.vuejs.org/v2/api/#provide-inject\\\">官网</a></p>\\n</blockquote>\\n<h2>留言消息组件的实现</h2>\\n<p>从上面图片的最终演示效果可以看到，父留言里面会包含若干个回复评论，他们的样式和功能几乎是一样的，所以我们可以把它抽离成一个组件，这个组件又会递归的调用其自身，最终就有了一个消息树的效果。下面就把完整的代码展示出来看看具体是怎么实现的</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\">&lt;!-- message-item.vue --&gt;\\n&lt;template&gt;\\n  &lt;dl&gt;\\n    &lt;dt&gt;\\n      &lt;div class=&quot;avatar-wrapper&quot;&gt;\\n        &lt;el-avatar :src=&quot;data.avatar&quot;&gt;&lt;/el-avatar&gt;\\n      &lt;/div&gt;\\n      &lt;div class=&quot;message-wrapper&quot;&gt;\\n        &lt;div class&gt;\\n          &lt;span class=&quot;nickname&quot;&gt;{{data.nickname}}&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\n          &lt;time&gt;{{new Date(data.createdAt) | dateFormat}}&lt;/time&gt;\\n        &lt;/div&gt;\\n\\n        &lt;p class=&quot;content&quot;&gt;\\n          {{data.content}}\\n          &lt;span\\n            v-if=&quot;data.replyToUser&quot;\\n          &gt;//@{{data.replyToUser.nickname}}:{{data.replyToUser.content}}&lt;/span&gt;\\n        &lt;/p&gt;\\n        &lt;div class=&quot;footer-action&quot;&gt;\\n          &lt;div class=&quot;message-statis&quot;&gt;\\n            &lt;el-button type=&quot;text&quot; @click=&quot;replyHandler&quot;&gt;回复&lt;/el-button&gt;\\n            &lt;el-button\\n              v-if=&quot;data.children &amp;&amp; data.children.length&quot;\\n              type=&quot;text&quot;\\n              @click=&quot;toggleExpandPanel&quot;\\n            &gt;\\n              {{isExpanded?`收起回复`:`${replyCount}条回复`}}\\n              &lt;i\\n                :class=&quot;!isExpanded?&#39;el-icon-arrow-down&#39;:&#39;el-icon-arrow-up&#39;&quot;\\n              &gt;&lt;/i&gt;\\n            &lt;/el-button&gt;\\n          &lt;/div&gt;\\n          &lt;div class=&quot;append-right&quot;&gt;\\n            &lt;span class=&quot;thumb-button&quot;&gt;\\n              {{data.thumbupCount}}\\n              &lt;i class=&quot;el-icon-thumb&quot; @click=&quot;thumbClicked(data)&quot;&gt;&lt;/i&gt;\\n            &lt;/span&gt;\\n          &lt;/div&gt;\\n        &lt;/div&gt;\\n        &lt;div class=&quot;editor-container&quot; ref=&quot;editorContainer&quot;&gt;&lt;/div&gt;\\n      &lt;/div&gt;\\n    &lt;/dt&gt;\\n    &lt;!-- &lt;el-divider v-if=&quot;level===1&quot;&gt;&lt;/el-divider&gt; --&gt;\\n    &lt;el-collapse-transition&gt;\\n      &lt;dd class=&quot;reply-container&quot; v-show=&quot;isExpanded&quot; v-if=&quot;replyCount&quot; ref=&quot;messageTreeContainer&quot;&gt;\\n        &lt;message-group :dataList=&quot;data.children&quot;&gt;&lt;/message-group&gt;\\n        &lt;!-- &lt;div class=&quot;loading-more&quot; @click=&quot;loadMore&quot; v-if=&quot;replyCount&gt;=1&quot;&gt;查看更多&lt;/div&gt; --&gt;\\n      &lt;/dd&gt;\\n    &lt;/el-collapse-transition&gt;\\n  &lt;/dl&gt;\\n&lt;/template&gt;\\n&lt;script&gt;\\n// import _ from &#39;lodash&#39;\\nimport { dateFormat } from &#39;../util&#39;\\n\\nexport default {\\n  name: &#39;MessageItem&#39;,\\n\\n  inject: {\\n    level: {\\n      default: 1\\n    },\\n    $editor: &#39;$editor&#39;,\\n    $messageTree: &#39;$messageTree&#39;\\n  },\\n\\n  provide() {\\n    return {\\n      level: this.level + 1\\n    }\\n  },\\n  data() {\\n    return {\\n      isExpanded: this.$messageTree.expandLayer &gt; this.level,\\n      hasEditor: false\\n    }\\n  },\\n  mounted() {\\n    const self = this\\n    this.$refs.editorContainer.addEventListener(&#39;DOMNodeInserted&#39;, function(e) {\\n      if (e.target === self.$editor &amp;&amp; e.relatedNode === this) {\\n        self.hasEditor = true\\n      }\\n    })\\n    this.$refs.editorContainer.addEventListener(&#39;DOMNodeRemoved&#39;, function(e) {\\n      if (e.target === self.$editor &amp;&amp; e.relatedNode === this) {\\n        self.hasEditor = false\\n      }\\n    })\\n  },\\n  filters: {\\n    dateFormat\\n  },\\n  watch: {\\n    &#39;$messageTree.expandLayer&#39;: function(value) {\\n      this.isExpanded = value &gt; this.level\\n    },\\n    isExpanded(value) {\\n      this.$messageTree.$emit(&#39;tree-expanded&#39;, this.data, value)\\n\\n      if (!value) {\\n        if (!this.$refs.messageTreeContainer.contains(this.$editor)) {\\n          return\\n        }\\n        this.$editor.remove()\\n      }\\n    }\\n  },\\n  props: {\\n    data: {\\n      type: Object,\\n      default: () =&gt; ({})\\n    }\\n  },\\n  computed: {\\n    replyCount() {\\n      return this.data.children &amp;&amp; this.data.children.length\\n    }\\n  },\\n\\n  methods: {\\n    loadMore() {\\n      const payload = { ...this.data }\\n      delete payload.children\\n      this.$emit(&#39;load-more&#39;, payload)\\n    },\\n    thumbClicked(item) {\\n      this.$messageTree.$emit(&#39;on-thumbup&#39;, item)\\n    },\\n    replyHandler() {\\n      if (!this.$refs.editorContainer.contains(this.$editor)) {\\n        this.$messageTree.showEditor()\\n        this.$refs.editorContainer.appendChild(this.$editor)\\n      }\\n\\n      if (this.$messageTree.editorType === &#39;default&#39;) {\\n        this.$nextTick(() =&gt; {\\n          // this.$messageTree.$refs.textarea.focus()\\n        })\\n      } else {\\n        const payload = {\\n          ...this.data\\n        }\\n\\n        delete payload.children\\n      this.$messageTree.$emit(&#39;on-reply&#39;, payload)\\n      }\\n    },\\n    toggleExpandPanel() {\\n      this.isExpanded = !this.isExpanded\\n    }\\n  }\\n}\\n&lt;/script&gt;\\n&lt;style lang=&quot;less&quot; scoped&gt;\\n@duration: 300ms;\\n\\ndt {\\n  display: flex;\\n  .avatar-wrapper {\\n    margin-right: 8px;\\n  }\\n  .message-wrapper {\\n    width: 100%;\\n    font-size: 14px;\\n\\n    time {\\n      color: #909399;\\n      vertical-align: middle;\\n    }\\n    .footer-action {\\n      display: flex;\\n      justify-content: space-between;\\n      align-items: center;\\n      .append-right {\\n        .thumb-button {\\n          color: #409eff;\\n          cursor: pointer;\\n        }\\n      }\\n    }\\n  }\\n}\\ndd.reply-container {\\n  background: #fafbfc;\\n  padding: 20px;\\n  margin-top: 20px;\\n}\\n.loading-more {\\n  user-select: none;\\n  text-align: center;\\n  font-size: 14px;\\n  color: #444;\\n  cursor: pointer;\\n}\\n\\n.message-reply-enter,\\n.message-reply-leave-to {\\n  transform: translateX(-100%);\\n}\\n.message-reply-active {\\n  transition: all @duration;\\n}\\n.message-reply-move {\\n  transition: all @duration;\\n}\\n.message-reply-item {\\n  transition: all @duration;\\n}\\n&lt;/style&gt;</code></pre>\\n      </div>\\n<h2>最终效果</h2>\\n<p><img src=\\\"https://github.com/konglingwen94/message-tree/raw/master/screenshots/1.gif\\\" alt=\\\"message-tree\\\">\\n<img src=\\\"https://github.com/konglingwen94/message-tree/raw/master/screenshots/2.gif\\\" alt=\\\"message-tree\\\"></p>\\n<h2>总结</h2>\\n<p>通过对留言消息树组件的封装，我们对编程算法中递归的使用有了更深入的了解。递归不仅在数据处理时会用到，在展示视图的场景下依然有很大的用处，这样组件的递归展现视图的方式会让我们的代码更干净，更便于维护，同时还有更好的逻辑复用能力。文章的最后附上本项目的<a href=\\\"https://github.com/konglingwen94/message-tree\\\">Github 地址</a></p>\\n<blockquote>\\n<p>备注：本片博文属于作者原创，转载请注明出处，谢谢!</p>\\n</blockquote>\",\"frontmatter\":{\"title\":\"封装一个基于Vue的留言评论编辑器组件\",\"date\":\"2020-04-05\",\"category\":\"Vue\",\"tags\":[\"轮子\"],\"cover\":\"\"}},\"site\":{\"siteMetadata\":{\"url\":\"https://konglingwen94.github.io\",\"thumbnail\":\"\",\"defaultAuthor\":\"孔令文\",\"donation\":{\"status\":true,\"channel\":{\"alipay\":\"https://cdn-images-1.medium.com/max/1600/1*PZjwR1Nbluff5IMI6Y1T6g@2x.png\",\"wechat\":\"\"}},\"share\":true}}},\"pathContext\":{\"slug\":\"/message-tree/\",\"title\":\"封装一个基于Vue的留言评论编辑器组件\",\"excerpt\":\"封装通用的用户评论消息组件（Vue…\",\"prev\":{\"fields\":{\"slug\":\"/iterate-runtime-performance/\"},\"frontmatter\":{\"title\":\"如何选择你的数据遍历方式\",\"category\":\"javascript\",\"tags\":[\"性能优化\"],\"cover\":\"\",\"date\":\"2020-04-15\"},\"excerpt\":\"概述 循环提供了一种快速和重复的方式去做同一件事，javascript 里提供了不同类型和功能的循环语句供我们使用，但是你有了解过这些语句在运行时的性能差异吗？ 循环方式 for 语句 for... in 语句 for... of 语句 while 语句 do... while…\"},\"next\":{\"fields\":{\"slug\":\"/good-swiper/\"},\"frontmatter\":{\"title\":\"封装一个自己的轮播图组件（基于 Vue）\",\"category\":\"轮子\",\"tags\":[\"Vue\"],\"cover\":\"\",\"date\":\"2020-04-02\"},\"excerpt\":\"…\"}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---articles-message-tree-cf0a4c20d80cddad7bd2.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>封装通用的用户评论消息组件（Vue）</h1>\\n<h2>组件功能</h2>\\n<p>大部分文章展示类的网站都有用户评论的功能，看了这么多的评论消息的你是不是也想封装一个通过的组件呢，以备用到的时候可以直接拿来复用。现在我们就简单概括一下这个组件的主要功能，</p>\\n<p>既然是评论消息组件，首先把用户已经评论过的消息展示出来是这个组件的基本功能，然后针对每一条消息还可以对他进行回复，这就好比现实世界中人们的交流一样，每个人发表了一段话，听到的人都可以进行回复，然后针对回复我们还可以进行回复，其实这是一个无限循环的交流过程，把这种现实中的场景放到程序中有一个专业的算法术语与之对应，那就是递归（recursive），不过现在的网站评论功能都只是展示两层的对话内容（评论和回复），今天我们要实现的是可以无限级的进行消息回复的一个功能组件。这个不仅是利用了递归的思想开发一个组件，而且当你遇到别的业务场景的时候一样可以复用这一套逻辑，比如要实现一个文件树的功能，其利用的也是数据递归的思想。那现在就让我们去封装这个组件吧!</p>\\n<h2>创建目录结构</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">├── src<span class=\\\"token operator\\\">/</span>\\n│   ├── components<span class=\\\"token operator\\\">/</span> <span class=\\\"token comment\\\">//内部组建</span>\\n│   │   ├── message<span class=\\\"token operator\\\">-</span>editor<span class=\\\"token punctuation\\\">.</span>vue <span class=\\\"token comment\\\">//评论编辑器</span>\\n│   │   ├── message<span class=\\\"token operator\\\">-</span>group<span class=\\\"token punctuation\\\">.</span>vue <span class=\\\"token comment\\\">//评论列表</span>\\n│   │   └── message<span class=\\\"token operator\\\">-</span>item<span class=\\\"token punctuation\\\">.</span>vue  <span class=\\\"token comment\\\">//单个评论</span>\\n│   ├── main<span class=\\\"token punctuation\\\">.</span>js  <span class=\\\"token comment\\\">//导出文件</span>\\n│   ├── main<span class=\\\"token punctuation\\\">.</span>vue  <span class=\\\"token comment\\\">//入口组建</span>\\n│   └── util<span class=\\\"token punctuation\\\">.</span>js\\n├── test<span class=\\\"token operator\\\">/</span>\\n├── <span class=\\\"token constant\\\">README</span><span class=\\\"token punctuation\\\">.</span>md\\n├── babel<span class=\\\"token punctuation\\\">.</span>config<span class=\\\"token punctuation\\\">.</span>js\\n├── <span class=\\\"token keyword\\\">package</span><span class=\\\"token punctuation\\\">.</span>json\\n└── vue<span class=\\\"token punctuation\\\">.</span>config<span class=\\\"token punctuation\\\">.</span>js</code></pre>\\n      </div>\\n<p>先创建好项目目录，然后把需要用到的内部组件也创建好，这样整个项目的骨架结构就搭建好了，接下来我们就开始功能的开发吧！</p>\\n<h2>组件拆分</h2>\\n<p>为了更好的实现组件模块化管理，这里把需要用到的功能组件都放到<code class=\\\"language-text\\\">component</code>的目录里面，现在就介绍一下这些组件最终都实现了怎样的功能。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">--</span> message<span class=\\\"token operator\\\">-</span>group<span class=\\\"token punctuation\\\">.</span>vue <span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">></span>\\n\\n<span class=\\\"token operator\\\">&lt;</span>template<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span>div <span class=\\\"token keyword\\\">class</span><span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"message-group\\\"</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>ul<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>li v<span class=\\\"token operator\\\">-</span><span class=\\\"token keyword\\\">for</span><span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"(item,index) in dataList\\\"</span> <span class=\\\"token operator\\\">:</span>key<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"index\\\"</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>message<span class=\\\"token operator\\\">-</span>item <span class=\\\"token operator\\\">:</span>data<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"item\\\"</span><span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>message<span class=\\\"token operator\\\">-</span>item<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>li<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>ul<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>template<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token operator\\\">&lt;</span>script<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"MessageGroup\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  props<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    dataList<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      type<span class=\\\"token operator\\\">:</span> Array<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token keyword\\\">default</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>script<span class=\\\"token operator\\\">></span>\\n\\n<span class=\\\"token operator\\\">&lt;</span>style<span class=\\\"token operator\\\">></span>\\nul<span class=\\\"token punctuation\\\">,</span>\\nli <span class=\\\"token punctuation\\\">{</span>\\n  list<span class=\\\"token operator\\\">-</span>style<span class=\\\"token operator\\\">:</span> none<span class=\\\"token punctuation\\\">;</span>\\n  margin<span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  padding<span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>style<span class=\\\"token operator\\\">></span></code></pre>\\n      </div>\\n<p>这个<code class=\\\"language-text\\\">message-group</code>组件其实就是对<code class=\\\"language-text\\\">message-item.vue（具体实现方式后面会详细介绍）</code>组件的一个列表循环展示，他就是一个消息树容器组件，这里为了开发和展示的过程中让项目组件结构的语义化更强就把他单独抽离出来了，而且当我们在浏览器<code class=\\\"language-text\\\">vue-devtool（vue项目开发中调试插件）</code>的选项面板中也能更清楚的看到每个组件所对应的视图是哪一块，这对于更好的组织组件结构是有好处的。下面用一个图片演示一下效果。</p>\\n<p><img src=\\\"https://github.com/konglingwen94/lite-blog/blob/master/screenshots/message-tree/Apr-11-2020%2021-09-43.gif?raw=true\\\" alt=\\\"message-tree\\\"></p>\\n<h2>Vue 组件递归调用</h2>\\n<p>组件是可以在它们自己的模板中调用自身的。不过它们只能通过 name 选项来做这件事</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">name<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"unique-name-of-my-component\\\"</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>当你使用 Vue.component 全局注册一个组件时，这个全局的 ID 会自动设置为该组件的 name 选项。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">Vue<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">component</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"unique-name-of-my-component\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>稍有不慎，递归组件就可能导致无限循环：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">name<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'stack-overflow'</span><span class=\\\"token punctuation\\\">,</span>\\ntemplate<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'&lt;div>&lt;stack-overflow>&lt;/stack-overflow>&lt;/div>'</span></code></pre>\\n      </div>\\n<p>类似上述的组件将会导致“max stack size exceeded”错误，所以请确保递归调用是条件性的 (例如使用一个最终会得到 false 的 v-if)。我们需要定义一个什么样的条件呢？如果给每一个被自身调用的递归组件打上一个层级深度的标志位（level），然后通过判断这个<code class=\\\"language-text\\\">level</code>的值来控制组件调用是不是就可以了。现在我们重写改写一下代码</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\">&lt;!-- `my-component.vue` --&gt;\\n\\n&lt;template&gt;\\n  &lt;div&gt;\\n    &lt;!-- my-component 需要全局注册，这里省略注册的代码 --&gt;\\n\\n    &lt;my-component v-if=&quot;level===renderLevel&quot;&gt;&lt;/my-component&gt;\\n  &lt;/div&gt;\\n&lt;/template&gt;\\n\\n&lt;script&gt;\\nexport default {\\n  name:&#39;my-component&#39;,\\n  inject:{\\n    level:{\\n      default:1\\n    }\\n  },\\n  provide(){\\n    return {\\n      level:this.level+1\\n    }\\n  },\\n  data(){\\n    return {\\n      renderLevel:1\\n    }\\n  }\\n\\n}\\n&lt;/script&gt;</code></pre>\\n      </div>\\n<p>我们先是通过 Vue 提供的组件选项<code class=\\\"language-text\\\">provide</code>和<code class=\\\"language-text\\\">inject</code>这两个配置项给每一个递归被调用的组件标注了一个层级<code class=\\\"language-text\\\">level</code>,然后在组件内部定义一个<code class=\\\"language-text\\\">renderLevel</code>的状态，通过判断需要展示的组件层级是否满足条件来终止递归组件的调用.</p>\\n<blockquote>\\n<p>有关<code class=\\\"language-text\\\">provide</code>和<code class=\\\"language-text\\\">inject</code>组合项的详细介绍请查看<a href=\\\"https://cn.vuejs.org/v2/api/#provide-inject\\\">官网</a></p>\\n</blockquote>\\n<h2>留言消息组件的实现</h2>\\n<p>从上面图片的最终演示效果可以看到，父留言里面会包含若干个回复评论，他们的样式和功能几乎是一样的，所以我们可以把它抽离成一个组件，这个组件又会递归的调用其自身，最终就有了一个消息树的效果。下面就把完整的代码展示出来看看具体是怎么实现的</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\">&lt;!-- message-item.vue --&gt;\\n&lt;template&gt;\\n  &lt;dl&gt;\\n    &lt;dt&gt;\\n      &lt;div class=&quot;avatar-wrapper&quot;&gt;\\n        &lt;el-avatar :src=&quot;data.avatar&quot;&gt;&lt;/el-avatar&gt;\\n      &lt;/div&gt;\\n      &lt;div class=&quot;message-wrapper&quot;&gt;\\n        &lt;div class&gt;\\n          &lt;span class=&quot;nickname&quot;&gt;{{data.nickname}}&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;\\n          &lt;time&gt;{{new Date(data.createdAt) | dateFormat}}&lt;/time&gt;\\n        &lt;/div&gt;\\n\\n        &lt;p class=&quot;content&quot;&gt;\\n          {{data.content}}\\n          &lt;span\\n            v-if=&quot;data.replyToUser&quot;\\n          &gt;//@{{data.replyToUser.nickname}}:{{data.replyToUser.content}}&lt;/span&gt;\\n        &lt;/p&gt;\\n        &lt;div class=&quot;footer-action&quot;&gt;\\n          &lt;div class=&quot;message-statis&quot;&gt;\\n            &lt;el-button type=&quot;text&quot; @click=&quot;replyHandler&quot;&gt;回复&lt;/el-button&gt;\\n            &lt;el-button\\n              v-if=&quot;data.children &amp;&amp; data.children.length&quot;\\n              type=&quot;text&quot;\\n              @click=&quot;toggleExpandPanel&quot;\\n            &gt;\\n              {{isExpanded?`收起回复`:`${replyCount}条回复`}}\\n              &lt;i\\n                :class=&quot;!isExpanded?&#39;el-icon-arrow-down&#39;:&#39;el-icon-arrow-up&#39;&quot;\\n              &gt;&lt;/i&gt;\\n            &lt;/el-button&gt;\\n          &lt;/div&gt;\\n          &lt;div class=&quot;append-right&quot;&gt;\\n            &lt;span class=&quot;thumb-button&quot;&gt;\\n              {{data.thumbupCount}}\\n              &lt;i class=&quot;el-icon-thumb&quot; @click=&quot;thumbClicked(data)&quot;&gt;&lt;/i&gt;\\n            &lt;/span&gt;\\n          &lt;/div&gt;\\n        &lt;/div&gt;\\n        &lt;div class=&quot;editor-container&quot; ref=&quot;editorContainer&quot;&gt;&lt;/div&gt;\\n      &lt;/div&gt;\\n    &lt;/dt&gt;\\n    &lt;!-- &lt;el-divider v-if=&quot;level===1&quot;&gt;&lt;/el-divider&gt; --&gt;\\n    &lt;el-collapse-transition&gt;\\n      &lt;dd class=&quot;reply-container&quot; v-show=&quot;isExpanded&quot; v-if=&quot;replyCount&quot; ref=&quot;messageTreeContainer&quot;&gt;\\n        &lt;message-group :dataList=&quot;data.children&quot;&gt;&lt;/message-group&gt;\\n        &lt;!-- &lt;div class=&quot;loading-more&quot; @click=&quot;loadMore&quot; v-if=&quot;replyCount&gt;=1&quot;&gt;查看更多&lt;/div&gt; --&gt;\\n      &lt;/dd&gt;\\n    &lt;/el-collapse-transition&gt;\\n  &lt;/dl&gt;\\n&lt;/template&gt;\\n&lt;script&gt;\\n// import _ from &#39;lodash&#39;\\nimport { dateFormat } from &#39;../util&#39;\\n\\nexport default {\\n  name: &#39;MessageItem&#39;,\\n\\n  inject: {\\n    level: {\\n      default: 1\\n    },\\n    $editor: &#39;$editor&#39;,\\n    $messageTree: &#39;$messageTree&#39;\\n  },\\n\\n  provide() {\\n    return {\\n      level: this.level + 1\\n    }\\n  },\\n  data() {\\n    return {\\n      isExpanded: this.$messageTree.expandLayer &gt; this.level,\\n      hasEditor: false\\n    }\\n  },\\n  mounted() {\\n    const self = this\\n    this.$refs.editorContainer.addEventListener(&#39;DOMNodeInserted&#39;, function(e) {\\n      if (e.target === self.$editor &amp;&amp; e.relatedNode === this) {\\n        self.hasEditor = true\\n      }\\n    })\\n    this.$refs.editorContainer.addEventListener(&#39;DOMNodeRemoved&#39;, function(e) {\\n      if (e.target === self.$editor &amp;&amp; e.relatedNode === this) {\\n        self.hasEditor = false\\n      }\\n    })\\n  },\\n  filters: {\\n    dateFormat\\n  },\\n  watch: {\\n    &#39;$messageTree.expandLayer&#39;: function(value) {\\n      this.isExpanded = value &gt; this.level\\n    },\\n    isExpanded(value) {\\n      this.$messageTree.$emit(&#39;tree-expanded&#39;, this.data, value)\\n\\n      if (!value) {\\n        if (!this.$refs.messageTreeContainer.contains(this.$editor)) {\\n          return\\n        }\\n        this.$editor.remove()\\n      }\\n    }\\n  },\\n  props: {\\n    data: {\\n      type: Object,\\n      default: () =&gt; ({})\\n    }\\n  },\\n  computed: {\\n    replyCount() {\\n      return this.data.children &amp;&amp; this.data.children.length\\n    }\\n  },\\n\\n  methods: {\\n    loadMore() {\\n      const payload = { ...this.data }\\n      delete payload.children\\n      this.$emit(&#39;load-more&#39;, payload)\\n    },\\n    thumbClicked(item) {\\n      this.$messageTree.$emit(&#39;on-thumbup&#39;, item)\\n    },\\n    replyHandler() {\\n      if (!this.$refs.editorContainer.contains(this.$editor)) {\\n        this.$messageTree.showEditor()\\n        this.$refs.editorContainer.appendChild(this.$editor)\\n      }\\n\\n      if (this.$messageTree.editorType === &#39;default&#39;) {\\n        this.$nextTick(() =&gt; {\\n          // this.$messageTree.$refs.textarea.focus()\\n        })\\n      } else {\\n        const payload = {\\n          ...this.data\\n        }\\n\\n        delete payload.children\\n      this.$messageTree.$emit(&#39;on-reply&#39;, payload)\\n      }\\n    },\\n    toggleExpandPanel() {\\n      this.isExpanded = !this.isExpanded\\n    }\\n  }\\n}\\n&lt;/script&gt;\\n&lt;style lang=&quot;less&quot; scoped&gt;\\n@duration: 300ms;\\n\\ndt {\\n  display: flex;\\n  .avatar-wrapper {\\n    margin-right: 8px;\\n  }\\n  .message-wrapper {\\n    width: 100%;\\n    font-size: 14px;\\n\\n    time {\\n      color: #909399;\\n      vertical-align: middle;\\n    }\\n    .footer-action {\\n      display: flex;\\n      justify-content: space-between;\\n      align-items: center;\\n      .append-right {\\n        .thumb-button {\\n          color: #409eff;\\n          cursor: pointer;\\n        }\\n      }\\n    }\\n  }\\n}\\ndd.reply-container {\\n  background: #fafbfc;\\n  padding: 20px;\\n  margin-top: 20px;\\n}\\n.loading-more {\\n  user-select: none;\\n  text-align: center;\\n  font-size: 14px;\\n  color: #444;\\n  cursor: pointer;\\n}\\n\\n.message-reply-enter,\\n.message-reply-leave-to {\\n  transform: translateX(-100%);\\n}\\n.message-reply-active {\\n  transition: all @duration;\\n}\\n.message-reply-move {\\n  transition: all @duration;\\n}\\n.message-reply-item {\\n  transition: all @duration;\\n}\\n&lt;/style&gt;</code></pre>\\n      </div>\\n<h2>最终效果</h2>\\n<p><img src=\\\"https://github.com/konglingwen94/message-tree/raw/master/screenshots/1.gif\\\" alt=\\\"message-tree\\\">\\n<img src=\\\"https://github.com/konglingwen94/message-tree/raw/master/screenshots/2.gif\\\" alt=\\\"message-tree\\\"></p>\\n<h2>总结</h2>\\n<p>通过对留言消息树组件的封装，我们对编程算法中递归的使用有了更深入的了解。递归不仅在数据处理时会用到，在展示视图的场景下依然有很大的用处，这样组件的递归展现视图的方式会让我们的代码更干净，更便于维护，同时还有更好的逻辑复用能力。文章的最后附上本项目的<a href=\\\"https://github.com/konglingwen94/message-tree\\\">Github 地址</a></p>\\n<blockquote>\\n<p>备注：本片博文属于作者原创，转载请注明出处，谢谢!</p>\\n</blockquote>\",\"frontmatter\":{\"title\":\"封装一个基于Vue的留言评论编辑器组件\",\"date\":\"2020-04-05\",\"category\":\"Vue\",\"tags\":[\"轮子\"],\"cover\":\"\"}},\"site\":{\"siteMetadata\":{\"url\":\"https://konglingwen94.github.io\",\"thumbnail\":\"\",\"defaultAuthor\":\"孔令文\",\"donation\":{\"status\":true,\"channel\":{\"alipay\":\"https://cdn-images-1.medium.com/max/1600/1*PZjwR1Nbluff5IMI6Y1T6g@2x.png\",\"wechat\":\"\"}},\"share\":true}}},\"pathContext\":{\"slug\":\"/message-tree/\",\"title\":\"封装一个基于Vue的留言评论编辑器组件\",\"excerpt\":\"封装通用的用户评论消息组件（Vue…\",\"prev\":{\"fields\":{\"slug\":\"/iterate-runtime-performance/\"},\"frontmatter\":{\"title\":\"如何选择你的数据遍历方式\",\"category\":\"javascript\",\"tags\":[\"性能优化\"],\"cover\":\"\",\"date\":\"2020-04-15\"},\"excerpt\":\"概述 循环提供了一种快速和重复的方式去做同一件事，javascript 里提供了不同类型和功能的循环语句供我们使用，但是你有了解过这些语句在运行时的性能差异吗？ 循环方式 for 语句 for... in 语句 for... of 语句 while 语句 do... while…\"},\"next\":{\"fields\":{\"slug\":\"/good-swiper/\"},\"frontmatter\":{\"title\":\"封装一个自己的轮播图组件（基于 Vue）\",\"category\":\"轮子\",\"tags\":[\"Vue\"],\"cover\":\"\",\"date\":\"2020-04-02\"},\"excerpt\":\"…\"}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/articles-message-tree.json\n// module id = 308\n// module chunks = 90083593868317"],"sourceRoot":""}